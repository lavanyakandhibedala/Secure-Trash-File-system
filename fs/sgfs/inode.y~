/*
 * Copyright (c) 1998-2015 Erez Zadok
 * Copyright (c) 2009	   Shrikar Archak
 * Copyright (c) 2003-2015 Stony Brook University
 * Copyright (c) 2003-2015 The Research Foundation of SUNY
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

//#include <string.h>
#include "sgfs.h"
#include <linux/crypto.h>
#include <linux/errno.h>
#include <linux/syscalls.h>
#include <linux/time.h>

#include <linux/scatterlist.h>
#include <linux/fs.h>
//#include "sgfs_lk.h"

#define MAX_KEY_SIZE  32
#define MIN_KEY_SIZE  16
#define BUF_SIZE  16//PAGE_SIZE



static int sgfs_rename(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry);

static int sgfs_create(struct inode *dir, struct dentry *dentry,
			 umode_t mode, bool want_excl)
{
	int err;
	struct dentry *lower_dentry;
	struct dentry *lower_parent_dentry = NULL;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_parent_dentry = lock_parent(lower_dentry);

	err = vfs_create(d_inode(lower_parent_dentry), lower_dentry, mode,
			 want_excl);
	if (err)
		goto out;
	err = sgfs_interpose(dentry, dir->i_sb, &lower_path);
	if (err)
		goto out;
	fsstack_copy_attr_times(dir, sgfs_lower_inode(dir));
	fsstack_copy_inode_size(dir, d_inode(lower_parent_dentry));

out:
	unlock_dir(lower_parent_dentry);
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int sgfs_link(struct dentry *old_dentry, struct inode *dir,
		       struct dentry *new_dentry)
{
	struct dentry *lower_old_dentry;
	struct dentry *lower_new_dentry;
	struct dentry *lower_dir_dentry;
	u64 file_size_save;
	int err;
	struct path lower_old_path, lower_new_path;

	file_size_save = i_size_read(d_inode(old_dentry));
	sgfs_get_lower_path(old_dentry, &lower_old_path);
	sgfs_get_lower_path(new_dentry, &lower_new_path);
	lower_old_dentry = lower_old_path.dentry;
	lower_new_dentry = lower_new_path.dentry;
	lower_dir_dentry = lock_parent(lower_new_dentry);

	err = vfs_link(lower_old_dentry, d_inode(lower_dir_dentry),
		       lower_new_dentry, NULL);
	if (err || !d_inode(lower_new_dentry))
		goto out;

	err = sgfs_interpose(new_dentry, dir->i_sb, &lower_new_path);
	if (err)
		goto out;
	fsstack_copy_attr_times(dir, d_inode(lower_new_dentry));
	fsstack_copy_inode_size(dir, d_inode(lower_new_dentry));
	set_nlink(d_inode(old_dentry),
		  sgfs_lower_inode(d_inode(old_dentry))->i_nlink);
	i_size_write(d_inode(new_dentry), file_size_save);
out:
	unlock_dir(lower_dir_dentry);
	sgfs_put_lower_path(old_dentry, &lower_old_path);
	sgfs_put_lower_path(new_dentry, &lower_new_path);
	return err;
}



int read_file(struct file *flip, unsigned  int len,unsigned char *data, unsigned long long  mode)//,void *buffer
{
        mm_segment_t old_fs;
        int return_data;

        old_fs=get_fs();
        set_fs(KERNEL_DS);
        return_data=vfs_read(flip,data,len,&(flip->f_pos));
 
        set_fs(old_fs);
        
        return return_data;

}

int write_file(struct file *flip, unsigned  int len,unsigned char *data, unsigned long long  mode)
{
        mm_segment_t old_fs;
        int return_data;
        
        flip->f_pos = 0;
        old_fs = get_fs();
        set_fs(KERNEL_DS);

        return_data = vfs_write( flip , data , len , &(flip->f_pos) ) ;

        set_fs(old_fs);
        return return_data;
}


int encrypt_decrypt_file(struct file *out_file, char *buffer, int file_size, char *key, bool flags)
{
    int err = 0;
    struct crypto_blkcipher *blkcipher = NULL;
    unsigned char iv[16] = "abcdabcdabcdabcd";
    struct scatterlist sg;
    struct blkcipher_desc desc;



    if (file_size % 16 != 0)
    {
            err = -EINVAL;
            goto out;
    }


    blkcipher = crypto_alloc_blkcipher("cbc(aes)",  0, 0);


    if (IS_ERR(blkcipher))
    {
            printk("could not allocate blkcipher handle for %s\n", "cbsaes");
            err = PTR_ERR(blkcipher);
            goto out;
    }


    if (crypto_blkcipher_setkey(blkcipher, key, 16))
    {
            printk("key could not be set\n");
            err = -EAGAIN;
            goto out;
    }


    crypto_blkcipher_set_iv(blkcipher, iv,16);


    desc.flags = 0;

    desc.tfm = blkcipher;

    sg_init_one(&sg, buffer, file_size);

    if (flags == 0) 
    {
   	    crypto_blkcipher_decrypt(&desc, &sg, &sg, file_size);
            printk("Decryption done\n");
    }
    else 
    {     
   	    crypto_blkcipher_encrypt(&desc, &sg, &sg, file_size);
            printk("encryption done\n");
    }  
    printk("\n encrypted data  : \n %s \n",buffer);
    err = write_file( out_file,file_size, buffer, 0644);
/*    if (flags==1)
    {
        unsigned char buf1[16];
        memset(buf1,'0',16);
        err = encrypt_decrypt_file( out_file, buffer, err, key, 0);
        if (err)
        {
              printk("\n ERROR in encrypt \n");
              return err;
        }

    }
  */ 
    if (blkcipher)
            crypto_free_blkcipher(blkcipher);
    err = 0;
out:
    return err;
}
/*
struct p_data{
 int padding;
 char p_var;
};
*/


int read_encrypt_file(struct file *f, struct file *out_f, int page_size, int flag)  
{
    int err = 0, i, file_size = f -> f_inode -> i_size;
    int num_pages = file_size / page_size, last_bytes = 0 ;
    char *temp_buf = kmalloc( page_size , GFP_KERNEL);
    int key_size = 16;
    char pad[key_size], c[1];
    //int BUF_SIZE = 16;
    int  padding_size = 0 ;
    char *key = "llllllllllllllll";
    char buf[BUF_SIZE];
    struct p_data *p;
    *key++=0;
   /* padding_size = ((file_size + 15) & -key_size) - file_size;
   // p -> padding = padding_size;
   // p -> p_var = '0';
    if ( padding_size > 0)
    {
         memset(pad,'0' , padding_size);
         
    }
//    out_f-> f_inode-> i_private = (void *) p  ;
    out_f -> f_pos = 0;
    if ( file_size < page_size)
    {
        err =  read_file( f, file_size, temp_buf, 0);
        if (err < 0)
                goto out;
        printk("\n data : %s \n",temp_buf);
        if (padding_size)
                      memcpy(temp_buf+err, pad, padding_size);
        printk("\n data : %s \n",temp_buf);
        err = encrypt_decrypt_file( out_f, temp_buf, BUF_SIZE, key, flag);
        if (err)
        {
              printk("\n ERROR in 1 encrypt \n");
              return err;
        }
        return 0;
    }
*/
printk("\n____________________ e0  ______________________________\n");
    padding_size = page_size - ( file_size % page_size  ) ;//((file_size + 15) & -key_size) - file_size;

    if (file_size == 0)
	padding_size = 0x10;
//printk("\n____________________ e1  ______________________________\n");
    memset(pad,'0' , padding_size);
//printk("\n therevbbbb 1 : %s \n",pad);
    pad[padding_size]='\0';
    p->padding  = padding_size;
    out_f -> f_path.dentry ->d_inode -> i_private = (struct p_data *) p;
    out_f->f_pos = 0;
   // err = write_file( out_f, 1, c, 0644);
   // err = write_file( out_f, padding_size, pad, 0644);
   printk("\n err : %d padding size : %s \n",err,c);
    f -> f_pos = 0;
printk("\n therevbbbb 2 : %d %d %s \n", padding_size,file_size, pad);
    if (file_size < page_size)
    {
	err = read_file( f, file_size, temp_buf, 0);
	if (err < 0)
		goto out;
printk("\n data : %s \n",temp_buf);
       if (padding_size)
                memcpy(temp_buf+err, pad, padding_size);
printk("\n data : %s \n",temp_buf);

	err = encrypt_decrypt_file( out_f, temp_buf, BUF_SIZE, key, flag);
        if (err)
        {
              printk("\n ERROR in 1 encrypt \n");
              return err;
        }
	return 0;
	}
        if (file_size >= page_size && file_size > page_size * num_pages)
	{
		last_bytes = file_size - (page_size * num_pages);
	}	
	for (i = 0; i < num_pages ; i++)
	{
		//temp_buf = NULL;
		err = read_file( f, page_size, temp_buf, 0 );
		if (err < 0)
		{
			printk(" ERROR in reading data");
			goto out;
		}
		err = encrypt_decrypt_file( out_f , temp_buf, BUF_SIZE, key, flag);
		if (err)
                {
                        printk("\n ERROR in encrypt \n");
                        return err;
                }
	}
	if (last_bytes != 0)
	{
		err = read_file( f, last_bytes, temp_buf, 0);
		if (err < 0)
			goto out;
        	if (padding_size)
         		memcpy(temp_buf+err, pad, padding_size);
		err = encrypt_decrypt_file( out_f, temp_buf, BUF_SIZE, key, flag);
                if (err)
        {
              printk("\n ERROR in encrypt \n");
              return err;
        }

	}
	err = 0;

out:
    kfree(temp_buf);
	return err;
}

char *my_strcat(char *dest, const char *src)
{
    size_t i,j;
    for (i = 0; dest[i] != '\0'; i++)
        ;
    for (j = 0; src[j] != '\0'; j++)
        dest[i+j] = src[j];
    dest[i+j] = '\0';
    return dest;
}

int read_decrypt_file(struct file *f, struct file *out_f, int page_size, int flag)
{
    int err = 0, i, file_size = f -> f_inode -> i_size - 17;
    int num_pages = file_size / page_size, last_bytes = 0 ;
    char *temp_buf = kmalloc( page_size , GFP_KERNEL);
    int key_size = 16;
    char pad[key_size], c[1];
    //int BUF_SIZE = 16;
    int padding_size = 0;
    char *key = "llllllllllllllll";
    char buf[BUF_SIZE];

    *key++=0;
	
//    f->f_pos = 0;	
   		
    err = read_file(f, 17, temp_buf, 0);
printk("\npading size : %hd\n",temp_buf[0]);
    padding_size = (int) temp_buf[0];
    out_f->f_pos = 0;
    memset(temp_buf, 0, BUF_SIZE);
    f->f_pos=1;


printk("\n therevbbbb 2 : %d %d %s \n", padding_size,file_size, pad);
    if (file_size < page_size)
    {
        err = read_file( f, file_size, temp_buf, 0);
        if (err < 0)
                goto out;
printk("\n data : %s \n",temp_buf);
       if (padding_size)
               memcpy(temp_buf+err, pad, padding_size);
printk("\n data : %s \n",temp_buf);

        err = encrypt_decrypt_file( out_f, temp_buf, BUF_SIZE, key, 0);
        if (err)
        {
              printk("\n ERROR in 1 decrypt \n");
              return err;
        }
        return 0;
        }
        if (file_size >= page_size && file_size > page_size * num_pages)
        {
                last_bytes = file_size - (page_size * num_pages);
        }
        for (i = 0; i < num_pages ; i++)
        {
                //temp_buf = NULL;
                err = read_file( f, page_size, temp_buf, 0 );
                if (err < 0)
                {
                        printk(" ERROR in reading data");
                        goto out;
                }
                err = encrypt_decrypt_file( out_f , temp_buf, BUF_SIZE, key, 0);
                if (err)
                {
                        printk("\n ERROR in decrypt \n");
                        return err;
                }
        }
        if (last_bytes != 0)
        {
                err = read_file( f, last_bytes, temp_buf, 0);
                if (err < 0)
                        goto out;
      //          if (padding_size)
        //                memcpy(temp_buf+err, pad, padding_size);
                err = encrypt_decrypt_file( out_f, temp_buf, BUF_SIZE, key, 0);
                if (err)
        {
              printk("\n ERROR in decrypt \n");
              return err;
        }

        }
        err = 0;

out:
    kfree(temp_buf);
        return err;
}

static int sgfs_unlink(struct inode *dir, struct dentry *dentry)
{
        int err, errno, flag1=0,p_max;
        struct dentry *lower_dentry;
        struct inode *lower_dir_inode = sgfs_lower_inode(dir);
        struct dentry *lower_dir_dentry;
        struct path lower_path;



        struct dentry *trash_dentry, *trash_parent_dentry;// *trap;
        //struct file *trash_file, *sgtemp_file;
        //int BUF_SIZE = 16;
        char *key = "llllllllllllllll", *in_path, *temp = NULL;//, *str;
        //unsigned char buf[BUF_SIZE];i
        int key_size = sizeof(key), key_flag = 0;
        struct file *out_file, *in_file, *t_file;
        char *outfilename = "/mnt/sgfs/.sg/", *temp_buf;
        //struct timeval tv;

//printk("\nbefore time \n");
//	gettimeofday(&tv); 
  //      printk("\n time stamp : %ld\n ",tv.tv_sec);

/*
        sgfs_get_lower_path(dentry, &lower_path);
        lower_dentry = lower_path.dentry;
        dget(lower_dentry);
        lower_dir_dentry = lock_parent(lower_dentry);
*/
       /* if (key_size >= MAX_KEY_SIZE || key_size <= MIN_KEY_SIZE)
        {
        	return EINVAL;
        }
*/
printk("\nthere  : %s    \n", dentry -> d_parent -> d_name.name);
        if (memcmp(".sg",dentry -> d_parent -> d_name.name,sizeof(".sg"))==0)
        {
              flag1 = 1;
              goto unlink;
        }
printk("\nthere\n");
        //outfilename = my_strcat(outfilename,dentry->d_name.name);
printk("\n$$$$$$$$$$$$$$$$$$$$$ outfilename : %s \n ", outfilename);
        out_file = filp_open("/mnt/sgfs/.sg/out.txt" ,O_CREAT|O_WRONLY|O_RDONLY, 0644);//("/usr/src/hw2-lkandhibedal/hw2/mnt/sgfs/.sgw/out.txt" ,O_CREAT|O_WRONLY|O_RDONLY, 0644);
//printk("\nthere : %d\n",out_file);


//t_file = filp_open("/mnt/sgfs/.sg/out1.txt" ,O_CREAT|O_WRONLY|O_RDONLY, 0644);

        if (IS_ERR(out_file))
        {
                printk("\n___________create fail_____________");
                errno = PTR_ERR(out_file);
                return errno;
        }

        printk("\n___________create file success____________");
        //lower_dir_dentry = lock_parent(lower_dentry);

        if (key_flag)
        	goto just_move;
        else
        {
        	goto encrypt_move;
        }

just_move:

        sgfs_get_lower_path(dentry, &lower_path);
        lower_dentry = lower_path.dentry;
        dget(lower_dentry);
        lower_dir_dentry = lock_parent(lower_dentry);

        if (memcmp(".sg",lower_dentry -> d_parent -> d_name.name,sizeof(".sg"))==0)
        {
              flag1 = 1;
              goto unlink;
        }		
        trash_dentry = out_file -> f_path.dentry;
        trash_parent_dentry = out_file -> f_path.dentry -> d_parent;
        filp_close(out_file, NULL);
        printk("\n___________close file success_____________\n");
        lower_dir_dentry = lock_parent(lower_dentry);
        dput(trash_dentry);
        dput(trash_parent_dentry);
        unlock_dir(lower_dir_dentry);
        dput(lower_dentry);
        sgfs_put_lower_path(dentry, &lower_path);
        err =  sgfs_rename(dir, dentry, trash_parent_dentry->d_inode, trash_dentry);
        if (err == -EBUSY && dentry->d_flags & DCACHE_NFSFS_RENAMED)
                err = 0;
        if (err)
        {
                goto out;
        }
        return err;
encrypt_move:        
        p_max = PATH_MAX;
        in_path = kmalloc( PATH_MAX, GFP_KERNEL);
        sgfs_get_lower_path(dentry, &lower_path);
        temp = d_path(&lower_path, in_path, p_max); 
        //printk("\n @@@@@@@@  in  path : %s@@@@@\n",temp); 
        in_file = filp_open(temp ,O_RDONLY, 0);
        if (IS_ERR(in_file))
        {
                printk("\n___________create fail_____________");
                errno = PTR_ERR(in_file);
                return errno;
        }
 printk("\n file in success\n");
         //memset(str, 'a', BUF_SIZE);
//         str="abcdefghijklmnop";
 //        memset(key,0,16);
         *key++=0;
         //str[16]='\0';
         err = read_encrypt_file(in_file, out_file, 16,1);
         if (err)
         {
               printk("\n ERROR in read_encrypt \n");
               filp_close(out_file, NULL);
               return err;
         }


//printk("\n __________________ 0  _______________________ :\n");
/*
filp_close(out_file, NULL);

//printk("\n __________________ 1  _______________________ :\n");

out_file = filp_open("/mnt/sgfs/.sg/out.txt" ,O_RDONLY, 0);

//printk("\n __________________ 2  _______________________ :\n");
//t_file = filp_open("/mnt/sgfs/.sg/out1.txt" ,O_CREAT|O_WRONLY|O_RDONLY, 0644);

//printk("\n __________________ 3  _______________________ :\n");
        
        err = read_decrypt_file(out_file, t_file, 16,0);
         if (err)
         {
               printk("\n ERROR in read_encrypt \n");
               filp_close(t_file, NULL);
               return err;
         }

//temp_buf = kmalloc(16,GFP_KERNEL);
//err = read_file(in_file, 16, temp_buf,0);
//err = write_file(out_file, err, temp_buf, 0644);

//kfree(temp_buf);
*/
printk("\n ______________________  in : %d \n ________________________ out : %d ____________-____________\n________________  t : %d  _______\n",in_file->f_inode->i_size,out_file->f_inode->i_size,out_file->f_inode->i_size);
      
//filp_close(t_file, NULL);



         filp_close(in_file, NULL);
 
         filp_close(out_file, NULL);
         sgfs_put_lower_path(dentry, &lower_path);
         kfree(temp);
         kfree(in_path);
         goto unlink;

unlink:

        sgfs_get_lower_path(dentry, &lower_path);
        lower_dentry = lower_path.dentry;
        dget(lower_dentry);
        lower_dir_dentry = lock_parent(lower_dentry);

         err = vfs_unlink(lower_dir_inode, lower_dentry, NULL);
         /*
          * Note: unlinking on top of NFS can cause silly-renamed files.
          * Trying to delete such files results in EBUSY from NFS
          * below.  Silly-renamed files will get deleted by NFS later on, so
          * we just need to detect them here and treat such EBUSY errors as
          * if the upper file was successfully deleted.       
          */

         if (err == -EBUSY && lower_dentry->d_flags & DCACHE_NFSFS_RENAMED)
                 err = 0;
         if (err)
         {
                 goto out;
         }

         fsstack_copy_attr_times(dir, lower_dir_inode);
         fsstack_copy_inode_size(dir, lower_dir_inode);
         set_nlink(d_inode(dentry), sgfs_lower_inode(d_inode(dentry))->i_nlink);
         d_inode(dentry)->i_ctime = dir->i_ctime;
         d_drop(dentry); /* this is needed, else LTP fails (VFS won't do it) */

out:
         unlock_dir(lower_dir_dentry);
         dput(lower_dentry);
         sgfs_put_lower_path(dentry, &lower_path);
out1:
         return err;
}  








/*
{
	int err, errno, flag1=0;
	struct dentry *lower_dentry;
	struct inode *lower_dir_inode = sgfs_lower_inode(dir);
	struct dentry *lower_dir_dentry;
	struct path lower_path;
        
        struct dentry *trash_dentry, *trash_parent_dentry, *trap; 
        struct file *trash_file, *sgtemp_file;
        int BUF_SIZE = 16;
        char *key = "llllllllllllllll", *str;
        unsigned char buf[BUF_SIZE];       
        struct file *out_file, *in_file;

        out_file = filp_open("/mnt/sgfs/.sgw/out.txt" ,O_CREAT|O_WRONLY|O_RDONLY, 0644);
        if (IS_ERR(out_file))
        {
                printk("\n___________create fail_____________");
                errno = PTR_ERR(out_file);
                return errno;
        }
        in_file = filp_open("/mnt/sgfs/abc1.txt" ,O_RDONLY, 0);
        if (IS_ERR(in_file))
        {
                printk("\n___________create fail_____________");
                errno = PTR_ERR(in_file);
                return errno;
        }
       	//memset(str, 'a', BUF_SIZE);
       	str="abcdefghijklmnop";
//        memset(key,0,16);
        *key++=0;        
        //str[16]='\0';
   
        err = read_encrypt_file(in_file, out_file,str, 16,1);
//       err = encrypt_decrypt_file( out_file, str, 16, key, 1);
        if (err)
        {
              printk("\n ERROR in encrypt \n");
              filp_close(out_file, NULL);
 
              return err;
        }

        filp_close(in_file, NULL);

        filp_close(out_file, NULL);
        return err;



	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	dget(lower_dentry);
	lower_dir_dentry = lock_parent(lower_dentry);

        printk("\n memcmp : %s\n",lower_dentry->d_parent -> d_name.name);   

        if(memcmp(".sg",lower_dentry -> d_parent -> d_name.name,sizeof(".sg"))==0) 
        {
              flag1 = 1;
              printk("\ngoto out1:\n");
              goto samedir;
        }
        else
        {
          sgtemp_file = filp_open("/mnt/sgfs/.sgw/temp.txt" ,O_CREAT|O_RDONLY, 0644);//open_file("/mnt/sgfs/.sg/temp.txt" ,O_CREAT,0);
          if (IS_ERR(sgtemp_file))
          {
                  printk("\n___________create fail_____________");
                  errno = PTR_ERR(sgtemp_file);
                  return errno;
          }
printk("\n*********  before write   *********\n");
//          err = write_file(sgtemp_file , sizeof("asssss"),"asssss", 0644);
         

printk("\n*********  after write   *********\n");
*/
  /*        if (err < 0)
          {

                   filp_close(sgtemp_file, NULL);
                   printk("\n___________close file success gdg_____________\n");
//                   dput(trash_dentry);
//                   dput(trash_parent_dentry);
 
                   goto out3;
          }
    *//*      printk("\n___________create file success____________");
          trash_dentry = sgtemp_file -> f_path.dentry;
    //      printk("\n ********* trash_dentry :  %s \n",trash_dentry->d_name.name);
          trash_parent_dentry = sgtemp_file -> f_path.dentry -> d_parent;
  //        printk("\n ********* trash_parent_dentry :  %s \n",trash_parent_dentry->d_name.name);
          
          filp_close(sgtemp_file, NULL);
          printk("\n___________close file success_____________\n");

          lower_dir_dentry = lock_parent(lower_dentry);

          dput(trash_dentry);
          dput(trash_parent_dentry);

           unlock_dir(lower_dir_dentry);
//printk("\n sjjd \n");
           dput(lower_dentry);
           sgfs_put_lower_path(dentry, &lower_path);





          err =  sgfs_rename(dir, dentry, trash_parent_dentry->d_inode, trash_dentry);
//printk("\n*********  path :   ***********\n");

          if (err == -EBUSY && dentry->d_flags & DCACHE_NFSFS_RENAMED)
                  err = 0;
//printk("\n*********  path :   ***********\n");

          if (err)
          {
                  goto out;
          }          
//printk("\n*********  path :   ***********\n");

        }
 return err;

samedir:

        //err =  sgfs_rename(lower_dir_inode, lower_dentry, trash_parent_dentry->d_inode, trash_dentry);	
        err = vfs_unlink(lower_dir_inode, lower_dentry, NULL);

*/	/*
	 * Note: unlinking on top of NFS can cause silly-renamed files.
	 * Trying to delete such files results in EBUSY from NFS
	 * below.  Silly-renamed files will get deleted by NFS later on, so
	 * we just need to detect them here and treat such EBUSY errors as
	 * if the upper file was successfully deleted.
	 */


/*	if (err == -EBUSY && lower_dentry->d_flags & DCACHE_NFSFS_RENAMED)
		err = 0;


	if (err)
        {

             if (flag1 == 0)
		goto out1;
             else
                goto out;
        }
//printk("\n*********  path  222:   ***********\n");

	fsstack_copy_attr_times(dir, lower_dir_inode);
//printk("\n*********  path 333:   ***********\n");

	fsstack_copy_inode_size(dir, lower_dir_inode);
//printk("\n*********  path ddd :   ***********\n");

	set_nlink(d_inode(dentry),
		  sgfs_lower_inode(d_inode(dentry))->i_nlink);
	d_inode(dentry)->i_ctime = dir->i_ctime;
	d_drop(dentry);
*/
 /* this is needed, else LTP fails (VFS won't do it) */
/*
out1:
//	unlock_dir(lower_dir_dentry);
        if (flag1==0)
        {
	  //filp_close(infile1, NULL);
        //  printk("\n___________close file success_____________\n");
//          dput(trash_dentry);
  //        dput(trash_parent_dentry);
        }
out:
        unlock_dir(lower_dir_dentry);
out3:
printk("\n gdhdh\n");
        dput(lower_dentry);
printk("\ntdggddd\n");
	sgfs_put_lower_path(dentry, &lower_path);
printk("\ndsdsdsfsf\n");
	return err;
}
*/
static int sgfs_symlink(struct inode *dir, struct dentry *dentry,
			  const char *symname)
{
	int err;
	struct dentry *lower_dentry;
	struct dentry *lower_parent_dentry = NULL;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_parent_dentry = lock_parent(lower_dentry);

	err = vfs_symlink(d_inode(lower_parent_dentry), lower_dentry, symname);
	if (err)
		goto out;
	err = sgfs_interpose(dentry, dir->i_sb, &lower_path);
	if (err)
		goto out;
	fsstack_copy_attr_times(dir, sgfs_lower_inode(dir));
	fsstack_copy_inode_size(dir, d_inode(lower_parent_dentry));

out:
	unlock_dir(lower_parent_dentry);
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int sgfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
{
	int err;
	struct dentry *lower_dentry;
	struct dentry *lower_parent_dentry = NULL;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_parent_dentry = lock_parent(lower_dentry);

	err = vfs_mkdir(d_inode(lower_parent_dentry), lower_dentry, mode);
	if (err)
		goto out;

	err = sgfs_interpose(dentry, dir->i_sb, &lower_path);
	if (err)
		goto out;

	fsstack_copy_attr_times(dir, sgfs_lower_inode(dir));
	fsstack_copy_inode_size(dir, d_inode(lower_parent_dentry));
	/* update number of links on parent directory */
	set_nlink(dir, sgfs_lower_inode(dir)->i_nlink);

out:
	unlock_dir(lower_parent_dentry);
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int sgfs_rmdir(struct inode *dir, struct dentry *dentry)
{
	struct dentry *lower_dentry;
	struct dentry *lower_dir_dentry;
	int err;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_dir_dentry = lock_parent(lower_dentry);

	err = vfs_rmdir(d_inode(lower_dir_dentry), lower_dentry);
	if (err)
		goto out;

	d_drop(dentry);	/* drop our dentry on success (why not VFS's job?) */
	if (d_inode(dentry))
		clear_nlink(d_inode(dentry));
	fsstack_copy_attr_times(dir, d_inode(lower_dir_dentry));
	fsstack_copy_inode_size(dir, d_inode(lower_dir_dentry));
	set_nlink(dir, d_inode(lower_dir_dentry)->i_nlink);

out:
	unlock_dir(lower_dir_dentry);
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int sgfs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode,
			dev_t dev)
{
	int err;
	struct dentry *lower_dentry;
	struct dentry *lower_parent_dentry = NULL;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_parent_dentry = lock_parent(lower_dentry);

	err = vfs_mknod(d_inode(lower_parent_dentry), lower_dentry, mode, dev);
	if (err)
		goto out;

	err = sgfs_interpose(dentry, dir->i_sb, &lower_path);
	if (err)
		goto out;
	fsstack_copy_attr_times(dir, sgfs_lower_inode(dir));
	fsstack_copy_inode_size(dir, d_inode(lower_parent_dentry));

out:
	unlock_dir(lower_parent_dentry);
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

/*
 * The locking rules in sgfs_rename are complex.  We could use a simpler
 * superblock-level name-space lock for renames and copy-ups.
 */
static int sgfs_rename(struct inode *old_dir, struct dentry *old_dentry,
			 struct inode *new_dir, struct dentry *new_dentry)
{
	int err = 0;
	struct dentry *lower_old_dentry = NULL;
	struct dentry *lower_new_dentry = NULL;
	struct dentry *lower_old_dir_dentry = NULL;
	struct dentry *lower_new_dir_dentry = NULL;
	struct dentry *trap = NULL;
	struct path lower_old_path, lower_new_path;

	sgfs_get_lower_path(old_dentry, &lower_old_path);
	sgfs_get_lower_path(new_dentry, &lower_new_path);
	lower_old_dentry = lower_old_path.dentry;
	lower_new_dentry = lower_new_path.dentry;
	lower_old_dir_dentry = dget_parent(lower_old_dentry);
	lower_new_dir_dentry = dget_parent(lower_new_dentry);


 

	trap = lock_rename(lower_old_dir_dentry, lower_new_dir_dentry);
	/* source should not be ancestor of target */



	if (trap == lower_old_dentry) {

		err = -EINVAL;
		goto out;
	}
	/* target should not be ancestor of source */



	if (trap == lower_new_dentry) {
		err = -ENOTEMPTY;
		goto out;
	}



	err = vfs_rename(d_inode(lower_old_dir_dentry), lower_old_dentry,
			 d_inode(lower_new_dir_dentry), lower_new_dentry,
			 NULL, 0);



	if (err)
		goto out;

	fsstack_copy_attr_all(new_dir, d_inode(lower_new_dir_dentry));
	fsstack_copy_inode_size(new_dir, d_inode(lower_new_dir_dentry));
	if (new_dir != old_dir) {
		fsstack_copy_attr_all(old_dir,
				      d_inode(lower_old_dir_dentry));
		fsstack_copy_inode_size(old_dir,
					d_inode(lower_old_dir_dentry));
	}

out:
	unlock_rename(lower_old_dir_dentry, lower_new_dir_dentry);
	dput(lower_old_dir_dentry);
	dput(lower_new_dir_dentry);
	sgfs_put_lower_path(old_dentry, &lower_old_path);
	sgfs_put_lower_path(new_dentry, &lower_new_path);
	return err;
}

static int sgfs_readlink(struct dentry *dentry, char __user *buf, int bufsiz)
{
	int err;
	struct dentry *lower_dentry;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	if (!d_inode(lower_dentry)->i_op ||
	    !d_inode(lower_dentry)->i_op->readlink) {
		err = -EINVAL;
		goto out;
	}

	err = d_inode(lower_dentry)->i_op->readlink(lower_dentry,
						    buf, bufsiz);
	if (err < 0)
		goto out;
	fsstack_copy_attr_atime(d_inode(dentry), d_inode(lower_dentry));

out:
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

static const char *sgfs_get_link(struct dentry *dentry, struct inode *inode,
				   struct delayed_call *done)
{
	char *buf;
	int len = PAGE_SIZE, err;
	mm_segment_t old_fs;

	if (!dentry)
		return ERR_PTR(-ECHILD);

	/* This is freed by the put_link method assuming a successful call. */
	buf = kmalloc(len, GFP_KERNEL);
	if (!buf) {
		buf = ERR_PTR(-ENOMEM);
		return buf;
	}

	/* read the symlink, and then we will follow it */
	old_fs = get_fs();
	set_fs(KERNEL_DS);
	err = sgfs_readlink(dentry, buf, len);
	set_fs(old_fs);
	if (err < 0) {
		kfree(buf);
		buf = ERR_PTR(err);
	} else {
		buf[err] = '\0';
	}
	set_delayed_call(done, kfree_link, buf);
	return buf;
}

static int sgfs_permission(struct inode *inode, int mask)
{
	struct inode *lower_inode;
	int err;

	lower_inode = sgfs_lower_inode(inode);
	err = inode_permission(lower_inode, mask);
	return err;
}

static int sgfs_setattr(struct dentry *dentry, struct iattr *ia)
{
	int err;
	struct dentry *lower_dentry;
	struct inode *inode;
	struct inode *lower_inode;
	struct path lower_path;
	struct iattr lower_ia;

	inode = d_inode(dentry);

	/*
	 * Check if user has permission to change inode.  We don't check if
	 * this user can change the lower inode: that should happen when
	 * calling notify_change on the lower inode.
	 */
	err = inode_change_ok(inode, ia);
	if (err)
		goto out_err;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_inode = sgfs_lower_inode(inode);

	/* prepare our own lower struct iattr (with the lower file) */
	memcpy(&lower_ia, ia, sizeof(lower_ia));
	if (ia->ia_valid & ATTR_FILE)
		lower_ia.ia_file = sgfs_lower_file(ia->ia_file);

	/*
	 * If shrinking, first truncate upper level to cancel writing dirty
	 * pages beyond the new eof; and also if its' maxbytes is more
	 * limiting (fail with -EFBIG before making any change to the lower
	 * level).  There is no need to vmtruncate the upper level
	 * afterwards in the other cases: we fsstack_copy_inode_size from
	 * the lower level.
	 */
	if (ia->ia_valid & ATTR_SIZE) {
		err = inode_newsize_ok(inode, ia->ia_size);
		if (err)
			goto out;
		truncate_setsize(inode, ia->ia_size);
	}

	/*
	 * mode change is for clearing setuid/setgid bits. Allow lower fs
	 * to interpret this in its own way.
	 */
	if (lower_ia.ia_valid & (ATTR_KILL_SUID | ATTR_KILL_SGID))
		lower_ia.ia_valid &= ~ATTR_MODE;

	/* notify the (possibly copied-up) lower inode */
	/*
	 * Note: we use d_inode(lower_dentry), because lower_inode may be
	 * unlinked (no inode->i_sb and i_ino==0.  This happens if someone
	 * tries to open(), unlink(), then ftruncate() a file.
	 */
	inode_lock(d_inode(lower_dentry));
	err = notify_change(lower_dentry, &lower_ia, /* note: lower_ia */
			    NULL);
	inode_unlock(d_inode(lower_dentry));
	if (err)
		goto out;

	/* get attributes from the lower inode */
	fsstack_copy_attr_all(inode, lower_inode);
	/*
	 * Not running fsstack_copy_inode_size(inode, lower_inode), because
	 * VFS should update our inode size, and notify_change on
	 * lower_inode should update its size.
	 */

out:
	sgfs_put_lower_path(dentry, &lower_path);
out_err:
	return err;
}

static int sgfs_getattr(struct vfsmount *mnt, struct dentry *dentry,
			  struct kstat *stat)
{
	int err;
	struct kstat lower_stat;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	err = vfs_getattr(&lower_path, &lower_stat);
	if (err)
		goto out;
	fsstack_copy_attr_all(d_inode(dentry),
			      d_inode(lower_path.dentry));
	generic_fillattr(d_inode(dentry), stat);
	stat->blocks = lower_stat.blocks;
out:
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int
sgfs_setxattr(struct dentry *dentry, const char *name, const void *value,
		size_t size, int flags)
{
	int err; struct dentry *lower_dentry;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	if (!d_inode(lower_dentry)->i_op->setxattr) {
		err = -EOPNOTSUPP;
		goto out;
	}
	err = vfs_setxattr(lower_dentry, name, value, size, flags);
	if (err)
		goto out;
	fsstack_copy_attr_all(d_inode(dentry),
			      d_inode(lower_path.dentry));
out:
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

static ssize_t
sgfs_getxattr(struct dentry *dentry, const char *name, void *buffer,
		size_t size)
{
	int err;
	struct dentry *lower_dentry;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	if (!d_inode(lower_dentry)->i_op->getxattr) {
		err = -EOPNOTSUPP;
		goto out;
	}
	err = vfs_getxattr(lower_dentry, name, buffer, size);
	if (err)
		goto out;
	fsstack_copy_attr_atime(d_inode(dentry),
				d_inode(lower_path.dentry));
out:
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

static ssize_t
sgfs_listxattr(struct dentry *dentry, char *buffer, size_t buffer_size)
{
	int err;
	struct dentry *lower_dentry;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	if (!d_inode(lower_dentry)->i_op->listxattr) {
		err = -EOPNOTSUPP;
		goto out;
	}
	err = vfs_listxattr(lower_dentry, buffer, buffer_size);
	if (err)
		goto out;
	fsstack_copy_attr_atime(d_inode(dentry),
				d_inode(lower_path.dentry));
out:
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int
sgfs_removexattr(struct dentry *dentry, const char *name)
{
	int err;
	struct dentry *lower_dentry;
	struct path lower_path;

	sgfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	if (!d_inode(lower_dentry)->i_op ||
	    !d_inode(lower_dentry)->i_op->removexattr) {
		err = -EINVAL;
		goto out;
	}
	err = vfs_removexattr(lower_dentry, name);
	if (err)
		goto out;
	fsstack_copy_attr_all(d_inode(dentry),
			      d_inode(lower_path.dentry));
out:
	sgfs_put_lower_path(dentry, &lower_path);
	return err;
}
const struct inode_operations sgfs_symlink_iops = {
	.readlink	= sgfs_readlink,
	.permission	= sgfs_permission,
	.setattr	= sgfs_setattr,
	.getattr	= sgfs_getattr,
	.get_link	= sgfs_get_link,
	.setxattr	= sgfs_setxattr,
	.getxattr	= sgfs_getxattr,
	.listxattr	= sgfs_listxattr,
	.removexattr	= sgfs_removexattr,
};

const struct inode_operations sgfs_dir_iops = {
	.create		= sgfs_create,
	.lookup		= sgfs_lookup,
	.link		= sgfs_link,
	.unlink		= sgfs_unlink,
	.symlink	= sgfs_symlink,
	.mkdir		= sgfs_mkdir,
	.rmdir		= sgfs_rmdir,
	.mknod		= sgfs_mknod,
	.rename		= sgfs_rename,
	.permission	= sgfs_permission,
	.setattr	= sgfs_setattr,
	.getattr	= sgfs_getattr,
	.setxattr	= sgfs_setxattr,
	.getxattr	= sgfs_getxattr,
	.listxattr	= sgfs_listxattr,
	.removexattr	= sgfs_removexattr,
};

const struct inode_operations sgfs_main_iops = {
	.permission	= sgfs_permission,
	.setattr	= sgfs_setattr,
	.getattr	= sgfs_getattr,
	.setxattr	= sgfs_setxattr,
	.getxattr	= sgfs_getxattr,
	.listxattr	= sgfs_listxattr,
	.removexattr	= sgfs_removexattr,
};
